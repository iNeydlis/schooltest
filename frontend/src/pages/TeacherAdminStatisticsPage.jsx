import React, { useState, useEffect, useContext } from 'react';
import { AuthContext } from '../context/AuthContext';
import api from '../services/api';
import { Link } from 'react-router-dom';

const TeacherAdminStatisticsPage = () => {
    const { user } = useContext(AuthContext);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [statistics, setStatistics] = useState({});
    const [grades, setGrades] = useState([]);
    const [subjects, setSubjects] = useState([]);
    const [tests, setTests] = useState([]);
    const [selectedView, setSelectedView] = useState('school'); // school, subject, grade, test
    const [selectedSubject, setSelectedSubject] = useState(null);
    const [selectedGrade, setSelectedGrade] = useState(null);
    const [selectedTest, setSelectedTest] = useState(null);
    const [viewData, setViewData] = useState(null);

    // –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
    const GRADE_COLORS = {
        excellent: '#10B981', // –ó–µ–ª–µ–Ω—ã–π
        good: '#3B82F6',      // –°–∏–Ω–∏–π
        average: '#F59E0B',   // –û—Ä–∞–Ω–∂–µ–≤—ã–π
        poor: '#EF4444'       // –ö—Ä–∞—Å–Ω—ã–π
    };

    useEffect(() => {
        const fetchInitialData = async () => {
            try {
                setLoading(true);

                // Fetch grades, subjects, and tests data
                const gradesData = await api.get('/grades');
                const subjectsData = await api.get('/subjects');
                const testsData = await api.get('/tests');

                setGrades(gradesData);
                setSubjects(subjectsData);
                setTests(testsData);

                // Fetch school-level statistics by default
                const schoolStatsData = await api.get('/statistics/school/top-students');
                setViewData(schoolStatsData);

                setLoading(false);
            } catch (err) {
                setError(err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
                setLoading(false);
            }
        };

        if (user && (user.role === 'TEACHER' || user.role === 'ADMIN')) {
            fetchInitialData();
        }
    }, [user]);

    const fetchStatisticsByView = async () => {
        try {
            setLoading(true);
            let data = null;

            switch(selectedView) {
                case 'school':
                    data = await api.get('/statistics/school/top-students');
                    break;
                case 'subject':
                    if (selectedSubject) {
                        data = await api.get(`/statistics/subject/${selectedSubject}`);
                    }
                    break;
                case 'grade':
                    if (selectedGrade) {
                        data = await api.get(`/statistics/grade/${selectedGrade}`);
                    }
                    break;
                case 'test':
                    if (selectedTest) {
                        data = await api.get(`/statistics/test/${selectedTest}`);
                    }
                    break;
                default:
                    break;
            }

            if (data) {
                setViewData(data);
            }

            setLoading(false);
        } catch (err) {
            setError(err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
            setLoading(false);
        }
    };

    useEffect(() => {
        if (user && (user.role === 'TEACHER' || user.role === 'ADMIN')) {
            fetchStatisticsByView();
        }
    }, [selectedView, selectedSubject, selectedGrade, selectedTest]);

    const handleViewChange = (view) => {
        setSelectedView(view);
        // Reset selections when changing view
        if (view !== 'subject') setSelectedSubject(null);
        if (view !== 'grade') setSelectedGrade(null);
        if (view !== 'test') setSelectedTest(null);
    };

    // Format date to dd.mm.yyyy
    const formatDate = (dateString) => {
        if (!dateString) return '–ù/–î';
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU');
    };

    // Helper to get performance text
    const getPerformanceText = (percentage) => {
        if (percentage >= 90) return '–û—Ç–ª–∏—á–Ω–æ';
        if (percentage >= 75) return '–•–æ—Ä–æ—à–æ';
        if (percentage >= 60) return '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ';
        return '–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è';
    };

    // Helper to get color based on percentage
    const getPerformanceColor = (percentage) => {
        if (percentage >= 90) return GRADE_COLORS.excellent;
        if (percentage >= 75) return GRADE_COLORS.good;
        if (percentage >= 60) return GRADE_COLORS.average;
        return GRADE_COLORS.poor;
    };

    if (loading) {
        return (
            <div style={containerStyle}>
                <div style={headerStyle}>
                    <h2 style={titleStyle}>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è</h2>
                    <p style={subtitleStyle}>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div style={containerStyle}>
                <div style={headerStyle}>
                    <h2 style={titleStyle}>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è</h2>
                    <p style={subtitleStyle}>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö</p>
                </div>
                <div style={errorContainerStyle}>
                    <p style={errorTitleStyle}>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</p>
                    <p>{error}</p>
                </div>
            </div>
        );
    }

    return (
        <div style={containerStyle}>
            <div style={headerStyle}>
                <h2 style={titleStyle}>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è</h2>
                <p style={subtitleStyle}>–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ —É—á–∞—â–∏—Ö—Å—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</p>

                {viewData && (
                    <div style={statsOverviewStyle}>
                        <div style={statsCardStyle}>
                            <div style={statsIconStyle}>üèÜ</div>
                            <div>
                                <p style={statsLabelStyle}>–°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</p>
                                <p style={statsValueStyle}>{viewData.averagePercentage ? viewData.averagePercentage.toFixed(1) : '0.0'}%</p>
                            </div>
                        </div>

                        <div style={statsCardStyle}>
                            <div style={statsIconStyle}>‚úÖ</div>
                            <div>
                                <p style={statsLabelStyle}>–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤</p>
                                <p style={statsValueStyle}>{viewData.completedTests || 0}</p>
                            </div>
                        </div>

                        <div style={statsCardStyle}>
                            <div style={statsIconStyle}>üë•</div>
                            <div>
                                <p style={statsLabelStyle}>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤</p>
                                <p style={statsValueStyle}>{viewData.totalStudents || 0}</p>
                            </div>
                        </div>
                    </div>
                )}
            </div>

            <div style={sectionStyle}>
                <h3 style={sectionTitleStyle}>–í—ã–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</h3>

                <div style={viewSelectorStyle}>
                    <button
                        style={{
                            ...viewButtonStyle,
                            backgroundColor: selectedView === 'school' ? '#3b82f6' : '#f5f7fa',
                            color: selectedView === 'school' ? 'white' : '#333'
                        }}
                        onClick={() => handleViewChange('school')}
                    >
                        –ü–æ —à–∫–æ–ª–µ
                    </button>
                    <button
                        style={{
                            ...viewButtonStyle,
                            backgroundColor: selectedView === 'subject' ? '#3b82f6' : '#f5f7fa',
                            color: selectedView === 'subject' ? 'white' : '#333'
                        }}
                        onClick={() => handleViewChange('subject')}
                    >
                        –ü–æ –ø—Ä–µ–¥–º–µ—Ç—É
                    </button>
                    <button
                        style={{
                            ...viewButtonStyle,
                            backgroundColor: selectedView === 'grade' ? '#3b82f6' : '#f5f7fa',
                            color: selectedView === 'grade' ? 'white' : '#333'
                        }}
                        onClick={() => handleViewChange('grade')}
                    >
                        –ü–æ –∫–ª–∞—Å—Å—É
                    </button>
                    <button
                        style={{
                            ...viewButtonStyle,
                            backgroundColor: selectedView === 'test' ? '#3b82f6' : '#f5f7fa',
                            color: selectedView === 'test' ? 'white' : '#333'
                        }}
                        onClick={() => handleViewChange('test')}
                    >
                        –ü–æ —Ç–µ—Å—Ç—É
                    </button>
                </div>

                {selectedView === 'subject' && (
                    <div style={selectContainerStyle}>
                        <label htmlFor="subject-select" style={selectLabelStyle}>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:</label>
                        <select
                            id="subject-select"
                            value={selectedSubject || ''}
                            onChange={(e) => setSelectedSubject(e.target.value)}
                            style={selectStyle}
                        >
                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç</option>
                            {subjects.map(subject => (
                                <option key={subject.id} value={subject.id}>
                                    {subject.name}
                                </option>
                            ))}
                        </select>
                    </div>
                )}

                {selectedView === 'grade' && (
                    <div style={selectContainerStyle}>
                        <label htmlFor="grade-select" style={selectLabelStyle}>–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:</label>
                        <select
                            id="grade-select"
                            value={selectedGrade || ''}
                            onChange={(e) => setSelectedGrade(e.target.value)}
                            style={selectStyle}
                        >
                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å</option>
                            {grades.map(grade => (
                                <option key={grade.id} value={grade.id}>
                                    {grade.name}
                                </option>
                            ))}
                        </select>
                    </div>
                )}

                {selectedView === 'test' && (
                    <div style={selectContainerStyle}>
                        <label htmlFor="test-select" style={selectLabelStyle}>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:</label>
                        <select
                            id="test-select"
                            value={selectedTest || ''}
                            onChange={(e) => setSelectedTest(e.target.value)}
                            style={selectStyle}
                        >
                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç</option>
                            {tests.map(test => (
                                <option key={test.id} value={test.id}>
                                    {test.title}
                                </option>
                            ))}
                        </select>
                    </div>
                )}
            </div>

            {viewData && (
                <div style={sectionStyle}>
                    <h3 style={sectionTitleStyle}>
                        {selectedView === 'school' && '–†–µ–π—Ç–∏–Ω–≥ –ª—É—á—à–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤'}
                        {selectedView === 'subject' && viewData.subjectName && `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É: ${viewData.subjectName}`}
                        {selectedView === 'grade' && viewData.gradeName && `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Å—É: ${viewData.gradeName}`}
                        {selectedView === 'test' && viewData.testTitle && `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ—Å—Ç—É: ${viewData.testTitle}`}
                    </h3>

                    {viewData.userStats && viewData.userStats.length > 0 ? (
                        <div style={tableContainerStyle}>
                            <table style={tableStyle}>
                                <thead>
                                <tr>
                                    <th style={thStyle}>–£—á–µ–Ω–∏–∫</th>
                                    <th style={thStyle}>–ö–ª–∞—Å—Å</th>
                                    {selectedView === 'test' && <th style={thStyle}>–î–∞—Ç–∞</th>}
                                    <th style={thStyle}>–†–µ–∑—É–ª—å—Ç–∞—Ç</th>
                                    <th style={thStyle}>–ë–∞–ª–ª—ã</th>
                                    <th style={thStyle}>–û—Ü–µ–Ω–∫–∞</th>
                                </tr>
                                </thead>
                                <tbody>
                                {viewData.userStats.map((stat, index) => (
                                    <tr key={`${stat.studentId}-${index}`} style={trStyle}>
                                        <td style={tdStyle}>{stat.studentName}</td>
                                        <td style={tdStyle}>{stat.gradeName || '–ù/–î'}</td>
                                        {selectedView === 'test' && <td style={tdStyle}>{formatDate(stat.completedAt)}</td>}
                                        <td style={tdStyle}>
                                            <span style={{
                                                ...badgeStyle,
                                                backgroundColor: getPerformanceColor(stat.percentage || 0)
                                            }}>
                                                {stat.percentage ? stat.percentage.toFixed(1) : '0.0'}%
                                            </span>
                                        </td>
                                        <td style={tdStyle}>{stat.score || 0} / {stat.maxScore || 0}</td>
                                        <td style={tdStyle}>
                                            <span style={{
                                                ...badgeStyle,
                                                backgroundColor: getPerformanceColor(stat.percentage || 0)
                                            }}>
                                                {getPerformanceText(stat.percentage || 0)}
                                            </span>
                                        </td>
                                    </tr>
                                ))}
                                </tbody>
                            </table>
                        </div>
                    ) : (
                        <div style={noDataStyle}>
                            <p style={noDataTitleStyle}>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
                            <p style={noDataSubtitleStyle}>
                                {selectedView === 'subject' && !selectedSubject && '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'}
                                {selectedView === 'subject' && selectedSubject && '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É'}
                                {selectedView === 'grade' && !selectedGrade && '–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'}
                                {selectedView === 'grade' && selectedGrade && '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö –≤ —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ'}
                                {selectedView === 'test' && !selectedTest && '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'}
                                {selectedView === 'test' && selectedTest && '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞'}
                                {selectedView === 'school' && '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö –≤ —à–∫–æ–ª–µ'}
                            </p>
                        </div>
                    )}
                </div>
            )}

            {selectedView === 'subject' && selectedSubject && viewData && viewData.testStats && viewData.testStats.length > 0 && (
                <div style={sectionStyle}>
                    <h3 style={sectionTitleStyle}>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É</h3>
                    <div style={tableContainerStyle}>
                        <table style={tableStyle}>
                            <thead>
                            <tr>
                                <th style={thStyle}>–¢–µ—Å—Ç</th>
                                <th style={thStyle}>–ö–ª–∞—Å—Å</th>
                                <th style={thStyle}>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª</th>
                                <th style={thStyle}>–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</th>
                                <th style={thStyle}>–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª</th>
                            </tr>
                            </thead>
                            <tbody>
                            {viewData.testStats.map((test, index) => (
                                <tr key={`test-${test.testId}-${index}`} style={trStyle}>
                                    <td style={tdStyle}>{test.testTitle}</td>
                                    <td style={tdStyle}>{test.gradeName || '–í—Å–µ'}</td>
                                    <td style={tdStyle}>
                                        <span style={{
                                            ...badgeStyle,
                                            backgroundColor: getPerformanceColor(test.averagePercentage || 0)
                                        }}>
                                            {test.averagePercentage ? test.averagePercentage.toFixed(1) : '0.0'}%
                                        </span>
                                    </td>
                                    <td style={tdStyle}>{test.maxScore || 0} –±–∞–ª–ª–æ–≤</td>
                                    <td style={tdStyle}>{test.passingScore || 0} –±–∞–ª–ª–æ–≤</td>
                                </tr>
                            ))}
                            </tbody>
                        </table>
                    </div>
                </div>
            )}

            <div style={actionContainerStyle}>
                <Link to="/statistics" style={buttonStyle}>–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</Link>
                <Link to="/" style={buttonStyle}>–ù–∞ –≥–ª–∞–≤–Ω—É—é</Link>
            </div>
        </div>
    );
};

// –°—Ç–∏–ª–∏
const containerStyle = {
    display: 'flex',
    flexDirection: 'column',
    gap: '1.5rem',
    padding: '2rem'
};

const headerStyle = {
    backgroundColor: '#3b82f6',
    padding: '2rem',
    borderRadius: '8px',
    color: 'white'
};

const titleStyle = {
    fontSize: '1.5rem',
    fontWeight: 'bold',
    marginBottom: '0.5rem'
};

const subtitleStyle = {
    opacity: '0.8',
    marginBottom: '1.5rem'
};

const statsOverviewStyle = {
    display: 'flex',
    flexWrap: 'wrap',
    gap: '1rem'
};

const statsCardStyle = {
    display: 'flex',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    padding: '1rem',
    borderRadius: '8px',
    flex: '1 1 200px'
};

const statsIconStyle = {
    fontSize: '1.5rem',
    marginRight: '1rem'
};

const statsLabelStyle = {
    fontSize: '0.875rem',
    opacity: '0.8'
};

const statsValueStyle = {
    fontSize: '1.25rem',
    fontWeight: 'bold'
};

const sectionStyle = {
    backgroundColor: 'white',
    padding: '2rem',
    borderRadius: '8px',
    boxShadow: '0 0 10px rgba(0,0,0,0.1)'
};

const sectionTitleStyle = {
    marginBottom: '1.5rem'
};

const viewSelectorStyle = {
    display: 'flex',
    flexWrap: 'wrap',
    gap: '0.5rem',
    marginBottom: '1.5rem'
};

const viewButtonStyle = {
    padding: '0.75rem 1.25rem',
    borderRadius: '4px',
    border: 'none',
    fontWeight: 'bold',
    cursor: 'pointer',
    transition: 'background-color 0.2s ease'
};

const selectContainerStyle = {
    marginBottom: '1.5rem'
};

const selectLabelStyle = {
    display: 'block',
    marginBottom: '0.5rem',
    fontWeight: 'bold'
};

const selectStyle = {
    width: '100%',
    maxWidth: '300px',
    padding: '0.5rem',
    borderRadius: '4px',
    border: '1px solid #ddd'
};

const tableContainerStyle = {
    overflowX: 'auto'
};

const tableStyle = {
    width: '100%',
    borderCollapse: 'collapse'
};

const thStyle = {
    textAlign: 'left',
    padding: '0.75rem',
    backgroundColor: '#f5f7fa',
    fontWeight: 'bold',
    borderBottom: '2px solid #eee'
};

const tdStyle = {
    padding: '0.75rem',
    borderBottom: '1px solid #eee'
};

const trStyle = {
    transition: 'background-color 0.2s ease',
    cursor: 'pointer',
    ':hover': {
        backgroundColor: '#f8f9fa'
    }
};

const badgeStyle = {
    padding: '0.25rem 0.5rem',
    borderRadius: '4px',
    color: 'white',
    fontSize: '0.75rem',
    fontWeight: 'bold'
};

const noDataStyle = {
    backgroundColor: '#f5f7fa',
    padding: '3rem',
    borderRadius: '8px',
    textAlign: 'center'
};

const noDataTitleStyle = {
    color: '#666',
    fontSize: '1.125rem',
    marginBottom: '0.5rem'
};

const noDataSubtitleStyle = {
    color: '#888',
    fontSize: '0.875rem'
};

const actionContainerStyle = {
    display: 'flex',
    gap: '1rem',
    justifyContent: 'center',
    marginTop: '1rem'
};

const buttonStyle = {
    backgroundColor: '#3b82f6',
    color: 'white',
    padding: '0.75rem 1.5rem',
    borderRadius: '4px',
    textDecoration: 'none',
    fontWeight: 'bold',
    transition: 'background-color 0.2s ease'
};

const errorContainerStyle = {
    backgroundColor: '#fee2e2',
    color: '#b91c1c',
    padding: '1rem',
    borderRadius: '8px',
    border: '1px solid #fecaca'
};

const errorTitleStyle = {
    fontWeight: 'bold',
    marginBottom: '0.5rem'
};

export default TeacherAdminStatisticsPage;